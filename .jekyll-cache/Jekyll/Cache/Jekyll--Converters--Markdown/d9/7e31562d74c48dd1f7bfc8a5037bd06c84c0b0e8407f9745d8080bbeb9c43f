I"¶!<p>If you want to create a website similar to this one, here is a guide for how to do it. With GitHub, you can create and host a website for free! Though you don‚Äôt have to use Jekyll, I have found it to be best option and doesn‚Äôt require a ton of HTML and CSS. Instead, Jekyll uses YAML and Markdown. Don‚Äôt worry if you don‚Äôt know either one, I don‚Äôt either, not really! I know just enough to get by in creating my website, then I look up anything I don‚Äôt know. (Google-Fu is a necessary skill to have for any developer!)</p>

<h2 id="set-up-your-github-repository">Set up your GitHub Repository</h2>

<ol>
  <li>
    <p>Create GitHub account. My username is just my first and last name: <em>brandonrasaka</em></p>
  </li>
  <li>
    <p>Create new repo and name it <code class="language-plaintext highlighter-rouge">[username].github.io</code></p>

    <blockquote>
      <p>For example, mine is <code class="language-plaintext highlighter-rouge">brandonrasaka.github.io</code></p>
    </blockquote>
  </li>
  <li>
    <p>Download and install <a href="https://desktop.github.com/">GitHub Desktop</a></p>
  </li>
  <li>
    <p>When prompted, sign in to GitHub</p>
  </li>
  <li>
    <p>When it finishes installing, you will see a list of Your repositories, including the one you just made</p>
  </li>
  <li>
    <p>Select it, then click the Clone button. This creates a new folder for storing all the files in the repo. Any changes you make in any file in the folder you can then ‚Äúpush‚Äù to the repo on GitHub</p>
  </li>
</ol>

<p><img src="/assets/images/github-pages/github-desktop-start.png" alt="Select repo from GitHub Desktop start screen" /></p>

<h2 id="install-jekyll">Install Jekyll</h2>

<ol>
  <li>
    <p>Follow Jekyll‚Äôs official guides <a href="https://jekyllrb.com/docs/installation/">here</a> to install Jekyll and its dependencies</p>
  </li>
  <li>
    <p>If on Windows, open PowerShell or Command Prompt and navigate to your GitHub repo directory</p>
  </li>
  <li>
    <p>Bundle the site‚Äôs contents and make it available on a local server</p>

    <pre><code><span style="color:rgba(255, 255, 255, 0.5)">&gt;</span> bundle exec jekyll serve</code></pre>
  </li>
</ol>

<h2 id="get-the-hacker-theme-and-start-customizing">Get the <em>Hacker</em> Theme and Start Customizing</h2>

<ol>
  <li>
    <p>Download <em>Hacker</em> theme from <a href="https://github.com/pages-themes/hacker">https://github.com/pages-themes/hacker</a></p>

    <blockquote>
      <p>You can obviously pick your own theme and don‚Äôt have to use this one. There are a number of sources for downloading Jekyll themes, which you can Google-Fu for. Also, the <a href="https://jekyllrb.com/docs/themes/">Jekyll documentation site</a> has a list of theme sources as well.</p>
    </blockquote>
  </li>
  <li>
    <p>Extract the contents of the download to your repo folder</p>
  </li>
  <li>
    <p>Navigate your web browser to <code class="language-plaintext highlighter-rouge">http://localhost:4000</code> or <code class="language-plaintext highlighter-rouge">127.0.0.1:4000</code>. You should see the default home page of the hacker theme.</p>
  </li>
  <li>
    <p>Now it‚Äôs time to make changes to suit your needs. For this tutorial, I‚Äôll be giving you the steps that I took to get my site how I like it, so make sure to tailor yours as needed. We‚Äôre going to be writing and editing files, so you‚Äôll want a good text editor. Personally, I prefer to use <a href="https://code.visualstudio.com/download">VS Code</a>, but <a href="https://atom.io/">Atom</a> or <a href="https://notepad-plus-plus.org/downloads/">Notepad++</a> work great too.</p>
  </li>
  <li>
    <p>From the root directory, open the <code class="language-plaintext highlighter-rouge">_config.yml</code> file. Edit its contents like shown below, but obviously change the information to match your needs, then save the file.</p>

    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="na">title</span><span class="pi">:</span> <span class="s">Brandon_Rasaka</span>
 <span class="na">description</span><span class="pi">:</span> <span class="s">Get to know me and check out some of the work I've done.</span>
 <span class="na">show_downloads</span><span class="pi">:</span> <span class="no">true</span>
 <span class="na">theme</span><span class="pi">:</span> <span class="s">jekyll-theme-hacker</span>
 <span class="na">name</span><span class="pi">:</span> <span class="s">Brandon_Rasaka</span>
</code></pre></div>    </div>

    <blockquote>
      <p>There are loads of more options you can specify in this file, but this is all I have for my simple site, and it‚Äôs the basics you‚Äôll need for yours.</p>
    </blockquote>
  </li>
  <li>
    <p>If you refresh your browser page, you should already see some changes. For example, the top line on the page (as well as the name of the site in the browser tab) will match the <code class="language-plaintext highlighter-rouge">title</code> value, and the second line will match the <code class="language-plaintext highlighter-rouge">description</code> value.</p>
  </li>
  <li>
    <p>Now let‚Äôs customize your homepage. Find the <code class="language-plaintext highlighter-rouge">index.md</code> file and copy it, renaming it <code class="language-plaintext highlighter-rouge">template.md</code>.</p>

    <blockquote>
      <p>You don‚Äôt actually have to copy it, but I find it helpful to keep a local copy of the style guide.</p>
    </blockquote>
  </li>
  <li>
    <p>In <code class="language-plaintext highlighter-rouge">index.md</code>, notice the first few lines are surrounded by thre dashes <code class="language-plaintext highlighter-rouge">---</code>. This is the front matter for your page. Every page in your site will contain front matter. My site‚Äôs homepage (index.md) has the following front matter:</p>

    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="s">---</span>
 <span class="s">layout</span><span class="pi">:</span> <span class="s">default</span>
 <span class="na">title</span><span class="pi">:</span> <span class="s">Home</span>
 <span class="na">nav_order</span><span class="pi">:</span> <span class="m">1</span>
 <span class="s">---</span>
</code></pre></div>    </div>

    <p>Let me explain what each of these means.</p>

    <ul>
      <li>
        <p>Layout: There are different layout templates, usually multiple styles with each Jekyll theme. The Hacker theme has only two layouts that are nearly identical: default and post. The template for these is stored in the <code class="language-plaintext highlighter-rouge">_layouts</code> directory as HTML files, but there are several variables and scripts that use the <em>Liquid</em> language to call pages and variable from elsewhere in the site. For example, the <code class="language-plaintext highlighter-rouge">default.html</code> layout has this line:</p>

        <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="p">{%</span><span class="w"> </span><span class="nt">include</span><span class="w"> </span>header.html<span class="p">%}</span>
</code></pre></div>        </div>

        <p>This tells it to insert the contents of <code class="language-plaintext highlighter-rouge">_includes/header.html</code> at that point, which itself is more HTML. So you can nest HTML within HTML using these variables.</p>
      </li>
      <li>
        <p>Title: This is pretty self-explanatory. It‚Äôs the title of the page. But more importantly, it‚Äôs also a variable that can be called elsewhere. For example, my <code class="language-plaintext highlighter-rouge">_includes/header.html</code> file contains the following loop:</p>

        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  &lt;nav class="main-nav"&gt;
  &lt;ul&gt;
          {% assign navigation_pages = site.html_pages | sort: 'nav_order' %}
          {% for p in navigation_pages %}
              {% if p.nav_order %}
                  &lt;li&gt;&lt;a href="{{ p.url }}" {% if p.url == page.url %} class="active"{% endif %}&gt;{{ p.title }}&lt;/a&gt;&lt;/li&gt;
              {% endif %}
          {% endfor %}
      &lt;/ul&gt;
  &lt;/nav&gt;
</code></pre></div>        </div>

        <p>I‚Äôm not going to explain every element in this bit of code, but notice the <code class="language-plaintext highlighter-rouge">{{ p.title }}</code> in the</p>
      </li>
    </ul>
  </li>
</ol>
:ET